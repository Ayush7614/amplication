name: CD-AWS
on:
  workflow_dispatch:
    inputs:
      target-env:
        type: choice
        description: To which environment to deploy
        default: staging-os
        required: true
        options: 
        - dev
        - staging-os
        - staging
        - prod
      source-branch:
        type: string
        description: Which branch to use for deployment
        default: main
        required: true
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      GCP: ${{ steps.create-secret-names.outputs.GCP }}
      GITHUB_APP_CLIENT_SECRET: ${{ steps.create-secret-names.outputs.GITHUB_APP_CLIENT_SECRET }}
      GITHUB_APP_PRIVATE_KEY: ${{ steps.create-secret-names.outputs.GITHUB_APP_PRIVATE_KEY }}
      GITHUB_CLIENT_SECRET: ${{ steps.create-secret-names.outputs.GITHUB_CLIENT_SECRET }}
      POSTGRESQL_PASSWORD: ${{ steps.create-secret-names.outputs.POSTGRESQL_PASSWORD }}
      POSTGRESQL_URL: ${{ steps.create-secret-names.outputs.POSTGRESQL_URL }}
    steps:
    - name: create secret names
      id: create-secret-names
      run: |
        export TARGET_ENV_SECRET=$(echo $TARGET_ENV | tr 'a-z' 'A-Z' | tr '-' '_')
        echo "TARGET_ENV_SECRET: $TARGET_ENV_SECRET"
      
        echo "::set-output name=GCP::AWS_${TARGET_ENV_SECRET}_GCP"
        echo "::set-output name=GITHUB_APP_CLIENT_SECRET::AWS_${TARGET_ENV_SECRET}_GITHUB_APP_CLIENT_SECRET"
        echo "::set-output name=GITHUB_APP_PRIVATE_KEY::AWS_${TARGET_ENV_SECRET}_GITHUB_APP_PRIVATE_KEY"
        echo "::set-output name=GITHUB_CLIENT_SECRET::AWS_${TARGET_ENV_SECRET}_GITHUB_CLIENT_SECRET"
        echo "::set-output name=POSTGRESQL_PASSWORD::AWS_${TARGET_ENV_SECRET}_POSTGRESQL_PASSWORD"
        echo "::set-output name=POSTGRESQL_URL::AWS_${TARGET_ENV_SECRET}_POSTGRESQL_URL"
      env:
        TARGET_ENV: ${{ github.event.inputs.target-env }}  
  deploy:
    runs-on: ubuntu-latest
    needs:
      - prepare
    env:
      GCP: ${{ needs.prepare.outputs.GCP }}
      GITHUB_APP_CLIENT_SECRET: ${{ needs.prepare.outputs.GITHUB_APP_CLIENT_SECRET }}
      GITHUB_APP_PRIVATE_KEY: ${{ needs.prepare.outputs.GITHUB_APP_PRIVATE_KEY }}
      GITHUB_CLIENT_SECRET: ${{ needs.prepare.outputs.GITHUB_CLIENT_SECRET }}
      POSTGRESQL_PASSWORD: ${{ needs.prepare.outputs.POSTGRESQL_PASSWORD }}
      POSTGRESQL_URL: ${{ needs.prepare.outputs.POSTGRESQL_URL }}
    steps:
      - uses: actions/checkout@v2
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-east-1
      - name: set branch-name
        run: |
            echo "BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed "s/\//-/g")" >> $GITHUB_ENV
            echo "SOURCE_BRANCH_NAME=$(echo $SOURCE_BRANCH_NAME | sed "s/\//-/g")" >> $GITHUB_ENV
        env:
          SOURCE_BRANCH_NAME: ${{ github.event.inputs.source-branch }}
      - name: calculate docker tags
        id: calculate-docker-tags
        run: |
          bash ./.github/workflows/scripts/build-values-command.sh
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set namespace
        id: set-namespace
        run: |
          NAMESPACE=$TARGET_ENV
          if [ "$TARGET_ENV" = "dev" ]; then
            NAMESPACE+="-$SOURCE_BRANCH_NAME"
          fi
          echo "Will deploy to $NAMESPACE"
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set cluster name
        id: set-cluster-name
        run: |
          CLUSTER_NAME="useast1-$TARGET_ENV"
          if [ "$TARGET_ENV" = "dev" ]; then
            CLUSTER_NAME="useast1-staging-os"
          fi
          echo "Will deploy to $CLUSTER_NAME eks cluster"
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: set repo url
        id: set-repo-url
        run: |
          REPO_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
          echo "REPO_URL = $REPO_URL"
          echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
      - name: set app name
        id: set-app-name
        run: |
          APP_NAME="amplication-$NAMESPACE"
          echo "APP_NAME = $APP_NAME"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
      - name: create app yaml
        id: create-app-yaml
        run: |
          cp $GITHUB_WORKSPACE/.github/workflows/argocd/app.yaml app.yaml
          sed -i "s|APP_NAME_PLACE_HOLER|$APP_NAME|g" app.yaml
          sed -i "s|REPO_URL_PLACE_HOLER|$REPO_URL|g" app.yaml
          sed -i "s|BRANCH_NAME_PLACE_HOLER|$GITHUB_REF_NAME|g" app.yaml
          sed -i "s|NAMESPACE_PLACE_HOLER|$NAMESPACE|g" app.yaml
          cat app.yaml
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
      - name: install argocd
        id: install-argocd
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      - name: deploy app
        id: deploy-app
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          COMMONM_VALUES_FILE="values-common.yaml"
          ENV_VALUES_FILE="values-$TARGET_ENV.yaml"
          ARGO_CD_URL="argocd.$TARGET_ENV.amplication-dev.com"
          if [ "$GITHUB_REPOSITORY" = "amplication-hosted" ]; then
            ARGO_CD_URL="argocd.$TARGET_ENV.amplication.com"
            if [ "$TARGET_ENV" = "prod" ]; then
              ARGO_CD_URL="argocd.amplication.com"
            fi
          fi
          
          echo "GCP secret name: $GCP"
          echo "GITHUB_APP_CLIENT_SECRET secret name: $GITHUB_APP_CLIENT_SECRET"
          echo "GITHUB_APP_PRIVATE_KEY secret name: $GITHUB_APP_PRIVATE_KEY"
          echo "GITHUB_CLIENT_SECRET secret name: $GITHUB_CLIENT_SECRET"
          echo "POSTGRESQL_PASSWORD secret name: $POSTGRESQL_PASSWORD"
          echo "POSTGRESQL_URL secret name: $POSTGRESQL_URL"

          #kubectl apply -f app.yaml
          export TARGET_ENV_SECRET=$(echo $TARGET_ENV | tr 'a-z' 'A-Z' | tr '-' '_')
          echo "TARGET_ENV_SECRET: $TARGET_ENV_SECRET"
          COMMAND="argocd login $ARGO_CD_URL --username admin --password $ARGO_CD_PASSWORD --grpc-web"
          echo "$COMMAND"
          $COMMAND
          SECRETS="-p amplication-server.secrets.GCP=$GCP"
          SECRETS+=" -p amplication-server.secrets.GITHUB_APP_CLIENT_SECRET=$GITHUB_APP_CLIENT_SECRET"
          SECRETS+=" -p amplication-server.secrets.GITHUB_APP_PRIVATE_KEY=$GITHUB_APP_PRIVATE_KEY"
          SECRETS+=" -p amplication-server.secrets.GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET"
          SECRETS+=" -p amplication-server.secrets.POSTGRESQL_PASSWORD=$POSTGRESQL_PASSWORD"
          SECRETS+=" -p amplication-server.secrets.POSTGRESQL_URL=$POSTGRESQL_URL"
          COMMAND="argocd app create $APP_NAME --project default --dest-namespace $NAMESPACE --path helm/charts/amplication  --dest-server https://kubernetes.default.svc --repo $REPO_URL --revision $GITHUB_REF_NAME --values $COMMONM_VALUES_FILE --values $ENV_VALUES_FILE $VERSIONS $SECRETS --upsert"
          echo "$COMMAND"
          $COMMAND
          COMMAND="argocd app sync $APP_NAME"
          echo "$COMMAND"
          $COMMAND
          AWS_STAGING-_POSTGRESQL_URL
        env:
          TARGET_ENV: ${{ github.event.inputs.target-env }}
          ARGO_CD_PASSWORD: ${{ secrets.ARGO_CD_PASSWORD }}
          GCP: ${{ secrets[env.GCP] }}
          GITHUB_APP_CLIENT_SECRET: ${{ secrets[env.GITHUB_APP_CLIENT_SECRET] }}
          GITHUB_APP_PRIVATE_KEY: ${{ secrets[env.GITHUB_APP_PRIVATE_KEY] }}
          GITHUB_CLIENT_SECRET: ${{ secrets[env.GITHUB_CLIENT_SECRET] }}
          POSTGRESQL_PASSWORD: ${{ secrets[env.POSTGRESQL_PASSWORD] }}
          POSTGRESQL_URL: ${{ secrets[env.POSTGRESQL_URL] }}
      